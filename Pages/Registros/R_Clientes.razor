@page "/R_Clientes"
@page "/R_Clientes/{ClienteId:int}"

@inject NotificationService notificacion
@inject ClientesBLL clienteBLL

<EditForm Model="cliente" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="rz-border-radius-4 shadow d-block p-2 border border-4">
        <div class="rz-border-radius-4 shadow card-header text-center">
            <h3>Registro de Clientes</h3>
        </div>

        <div class="rz-border-radius-4 shadow border border-4 card card-body">
            <div class="container overflow-hidden">
                <form class="row gy-3">
                    @*ClienteId*@
                    <div class="form-row align-items-center">
                        <div class="col-ms">
                            <label>ClienteId</label>
                            <div class="input-group mb-3">
                                <InputNumber @bind-Value="cliente.ClienteId"
                                    class="rz-border-radius-4 shadow form-control" />
                                <div class="input-group-append">
                                    <div class="input-group-append">
                                        <button type="button"
                                            class="rz-border-radius-4 shadow form-control col-4 btn btn-primary  "
                                            @onclick="Buscar">Buscar</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @*Nombre*@
                        <div class="col-ms">
                            <label>Nombres </label>
                            <InputText @bind-Value="cliente.Nombres" placeholder="Ingrese su nombre"
                                class="rz-border-radius-4 shadow form-control" />
                            <ValidationMessage For="@(() => cliente.Nombres)" />
                        </div>

                        @*Dirección*@
                        <div class="col-ms">
                            <label>Dirección </label>
                            <InputText @bind-Value="cliente.Direccion" placeholder="Ingrese su dirección"
                                class="rz-border-radius-4 shadow form-control" />
                            <ValidationMessage For="@(() => cliente.Direccion)" />
                        </div>

                        @*Fecha*@
                        <div class="col-ms">
                            <label>Fecha </label>
                            <InputDate @bind-Value="cliente.Fecha" class="rz-border-radius-4 shadow form-control" />
                            <ValidationMessage For="@(() => cliente.Fecha)" />
                        </div>

                        @*Cédula*@
                        <div class="col-ms">
                            <label>Cédula </label>
                            <InputText @bind-Value="cliente.Cedula" placeholder="Ejemplo 042-4277567-7"
                                class="rz-border-radius-4 shadow form-control" />
                            <ValidationMessage For="@(() => cliente.Cedula)" />
                        </div>

                        @*Email*@
                        <div class="col-ms">
                            <label>Email </label>
                            <InputText @bind-Value="cliente.Email" placeholder="Nombre@gmail.com"
                                class="rz-border-radius-4 shadow form-control" />
                            <ValidationMessage For="@(() => cliente.Email)" />
                        </div>

                        @*Teléfono*@
                        <div class="col-ms">
                            <label>Teléfono </label>
                            <InputText @bind-Value="cliente.Telefono" placeholder="Ejemplo 809-875-9684"
                                class="rz-border-radius-4 shadow form-control" />
                            <ValidationMessage For="@(() => cliente.Telefono)" />
                        </div>

                        @*Celular*@
                        <div class="col-ms">
                            <label>Celular </label>
                            <InputText @bind-Value="cliente.Celular" placeholder="Ejemplo 809-875-9684"
                                class="rz-border-radius-4 shadow form-control" />
                            <ValidationMessage For="@(() => cliente.Celular)" />
                        </div>
                    </div>
                </form>
            </div>
            <div class="card-footer">
                <div class="mb-3 text-center" display: inline-block>
                    <button type="button" class="rz-border-radius-4 shadow border border-4 btn btn-primary"
                        @onclick="Nuevo">
                        <i class="oi oi-document" /> Nuevo
                    </button>
                    <button type="submit" class="rz-border-radius-4 shadow border border-4 btn btn-success">
                        <i class="bi bi-save-fill" /> Guardar
                    </button>
                    <button type="button" class="rz-border-radius-4 shadow border border-4 btn btn-danger"
                        @onclick="Eliminar">
                        <i class="oi oi-trash" /> Eliminar
                    </button>
                </div>
            </div>
        </div>
    </div>

</EditForm>
@code {
    [Parameter]
    public int ClienteId { get; set; }

    public Clientes cliente { get; set; } = new Clientes();

    public List<Clientes> lista { get; set; } = new List<Clientes>();

    protected async override Task OnInitializedAsync()
    {
        cliente.Fecha = DateTime.Now;
        if (ClienteId > 0)
        {
            this.cliente.ClienteId = ClienteId;
            await this.Buscar();
        }
        lista = await clienteBLL.GetClientes(o => true);
    }

    private async Task Buscar()
    {
        if (cliente.ClienteId > 0)
        {
            var encontrado = await clienteBLL.Buscar(cliente.ClienteId);
            if (encontrado != null)
            {
                this.cliente = encontrado;
                notificacion.ShowNotification("Registro encontrado", NotificationSeverity.Success);
            }
            else
            {
                notificacion.ShowNotification("Registro no encontrado", NotificationSeverity.Warning);
            }
        }
    }

    public async Task Nuevo()
    {
        cliente = new Clientes();
    }

    private async Task Guardar()
    {
        bool guardado = await clienteBLL.Guardar(cliente);
        if (guardado)
        {
            Nuevo();
            notificacion.ShowNotification("Guardado correctamente.");
        }
        else
        {
            notificacion.ShowNotification("No fue guardado, intentelo de nuevo.", NotificationSeverity.Error);
        }
    }

    private async Task Eliminar()
    {
        var elimino = await clienteBLL.Eliminar(cliente);
        if (elimino)
        {
            Nuevo();
            notificacion.ShowNotification("Eliminado correctamente.");
        }
        else
        {
            notificacion.ShowNotification("No fue eliminado. Actualize el navegador y vuelva a intentarlo.",
            NotificationSeverity.Error);
        }
    }
}
