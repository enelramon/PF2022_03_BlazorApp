@page "/Recordatorio"
@page "/Recordatorio/{RecordatorioId:int}"

@inject RecordatoriosBLL recordatoriosBLL
@inject NotificationService recordatorio
@inject ClientesBLL clienteBLL

<EditForm Model="Recordatorio" OnValidSubmit="GuardarRecordatorio">
    <DataAnnotationsValidator />

    <a type="button" class="rz-border-radius-4 shadow border border-4 btn-lg btn btn-primary" data-toggle="tooltip" data-placement="right" title="Regresar al menu" href="m_recordatorios" > <i class="oi oi-arrow-circle-left" /></a>
    <br/>
    <p/>

    <div class="rz-border-radius-4 shadow bg-white d-block p-2 border border-4">
        <div class="rz-border-radius-4 shadow card-header text-center">
            <h3>Registro Recordatorios (Cliente) </h3>
        </div>

        <div class="rz-border-radius-4 shadow border border-4 card card-body">
            <div class="container overflow-hidden">
                <form class="row gy-3">

                    @*RecordatorioId*@
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label class="form-label">RecordatorioClienteId</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="Recordatorio.RecordatorioId" placeholder="Ingrese un ID"
                                        class="rz-border-radius-4 shadow form-control col-4" />
                                    <div class="input-group-append">
                                        <button type="button"
                                            class="rz-border-radius-4 shadow btn btn-primary input-group-text"
                                            @onclick="BuscarRecordatorio">
                                            <i class="oi oi-magnifying-glass" />
                                        </button>
                                    </div>
                                </div>
                                <ValidationMessage For="@(() => Recordatorio.RecordatorioId)" />
                            </div>
                        </div>
                    </div>

                    @*Dia*@
                    <div class="col-md-2">
                        <label class="form-label">Dia</label>
                        <InputNumber @bind-Value="Recordatorio.Dia" placeholder="Ingrese un dia"
                            class="rz-border-radius-4 shadow shadow form-control" />
                        <ValidationMessage For="@(() => Recordatorio.Dia)" />
                    </div>

                    @*ProximaFecha*@
                    <div class="col-md-2">
                        <label class="form-label">ProximaFecha</label>
                        <InputDate @bind-Value="Recordatorio.FroximaFecha"
                            class="rz-border-radius-4 shadow form-control shadow" />
                        <ValidationMessage For="@(() => Recordatorio.FroximaFecha)" />
                    </div>

                    @*ClienteId*@
                    <div class="col-md-3">
                        <label class="form-label">ClienteId</label>
                        <div class="input-group mb-3">
                            <InputSelect class="rz-border-radius-4 shadow form-select"
                                @bind-Value="Recordatorio.ClienteId">
                                <option value="0" disabled>Seleccione el cliente</option>
                                @foreach (var select in ListaClientes)
                                {
                                    <option value="@select.ClienteId">@select.Nombres</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => Recordatorio.ClienteId)" />
                        </div>
                    </div>

                    @*Descripción*@
                    <div class="col-md-5">
                        <textarea type="text" class="rz-border-radius-4 shadow text-center form-control shadow"
                            @bind="Recordatorio.Descripción" placeholder="Ingresa una descripcion"
                            style="height: 90px"></textarea>
                        <ValidationMessage For="@(() => Recordatorio.Descripción)" />
                    </div>
                </form>
            </div>
        </div>
        <div class="shadow border border-4 rz-border-radius-4 card-footer d-flex justify-content-center">
            <div class="btn-group" role="group">
                <button type="button" class="rz-border-radius-4 shadow border border-4 btn-lg btn btn-primary"
                    @onclick="GuardarRecordatorio"> <i class="oi oi-document" />
                    Guardar</button>
                <button type="button" class="rz-border-radius-4 shadow border border-4 btn-lg btn btn-success"
                    @onclick="EditarRecordatorio"> <i class="oi oi-pencil" />
                    Editar</button>
                <button type="button" class="rz-border-radius-4 shadow border border-4 btn-lg btn btn-danger"
                    @onclick="EliminarRecordatorio"><i class="oi oi-trash" />
                    Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {

    [Parameter]
    public int RecordatorioId { get; set; }
    private Clientes clientes { get; set; } = new Clientes();
    private Recordatorios Recordatorio { get; set; } = new Recordatorios();
    private List<Recordatorios> ListaRecordatorios { get; set; } = new List<Recordatorios>();
    private List<Clientes> ListaClientes { get; set; } = new List<Clientes>();

    protected async override Task OnInitializedAsync()
    {
        ListaRecordatorios = await recordatoriosBLL.GetRecordatorios(r => true);
        ListaClientes = await clienteBLL.GetClientes(c => true);

        if (RecordatorioId > 0)
        {
            this.Recordatorio.RecordatorioId = RecordatorioId;
            await this.BuscarRecordatorio();
        }
    }

    private async Task BuscarRecordatorio()
    {
        if (Recordatorio.RecordatorioId > 0 || Recordatorio.Dia > 0)
        {
            var encontrado = await recordatoriosBLL.Buscar(Recordatorio.RecordatorioId, Recordatorio.Dia);

            if (encontrado != null)
            {
                this.Recordatorio = encontrado;
                recordatorio.ShowNotification("Recordatorio encontrado", NotificationSeverity.Success);
            }
            else
            {
                recordatorio.ShowNotification("Recordatorio no encontrado", NotificationSeverity.Error);
            }
        }
    }
    private async Task GuardarRecordatorio()
    {
        bool guardo;

        if (Recordatorio.Dia > 32 || Recordatorio.Dia < 1)
        {
            guardo = false;
            recordatorio.ShowNotification("Recordatorio no guardado", NotificationSeverity.Error);
        }
        else
        {
            guardo = true;
            guardo = await recordatoriosBLL.Guardar(Recordatorio);
            Recordatorio = new Recordatorios();
            recordatorio.ShowNotification("Recordatorio guardado", NotificationSeverity.Success);
        }
    }

    private async Task EliminarRecordatorio()
    {
        bool elimino = await recordatoriosBLL.Eliminacion(Recordatorio);

        if (elimino)
        {
            Recordatorio = new Recordatorios();
            recordatorio.ShowNotification("Recordatorio eliminado", NotificationSeverity.Success);
        }
        else
        {
            recordatorio.ShowNotification("Recordatorio no eliminado", NotificationSeverity.Error);
        }
    }

    private async Task EditarRecordatorio()
    {
        bool editar;

        if (Recordatorio.Dia > 32 || Recordatorio.Dia < 1)
        {
            editar = false;
            recordatorio.ShowNotification("Recordatorio no editado", NotificationSeverity.Error);
        }
        else
        {
            editar = true;
            editar = await recordatoriosBLL.Editar(Recordatorio);
            Recordatorio = new Recordatorios();
            recordatorio.ShowNotification("Recordatorio editado", NotificationSeverity.Success);
        }
    }
}