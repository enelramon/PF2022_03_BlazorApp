@page "/R_Prioridades"
@page "/R_Prioridades/{PrioridadId:int}"

@inject NotificationService notificacion
@inject PrioridadesBLL prioridadesBLL
@inject ICounterViewModel counterViewModel

<EditForm Model="prioridad" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="rz-border-radius-4 shadow bg-white d-block p-2 border border-4">
        <div class="rz-border-radius-4 shadow card-header text-center">
            <h3>Registro Prioridades</h3>
        </div>

        <div class="rz-border-radius-4 shadow border border-4 card card-body">
            <div class="container overflow-hidden">
                <form class="row gy-3">
                    @*PrioridadId*@
                    <div class="form-row align-items-center">
                        <div class="containe col-3">
                            <div class="form-group">
                                <label class="form-label">PrioridadId</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="prioridad.PrioridadId" placeholder="Ingrese un ID" class="rz-border-radius-4 shadow form-control col-4 " />
                                    <div class="input-group-append">
                                        <button type="button" class="rz-border-radius-4 shadow btn btn-primary input-group-text"
                                                @onclick="Buscar">
                                            <i class="oi oi-magnifying-glass" />
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Descripcion*@
                    <div class="mb-3">

                        <label class="form-label">Descripcion</label>
                        <InputText @bind-Value="prioridad.Descripcion" placeholder="Ingrese una Descripción"
                                   class="rz-border-radius-4 shadow shadow form-control" />

                        <ValidationMessage For="@(() => prioridad.Descripcion)" />
                    </div>

                    @*Orden*@
                    <div class="col align-self-center">
                        <textarea type="text" class="rz-border-radius-4 shadow text-center form-control shadow"
                                  @bind="prioridad.Orden" placeholder="Detalles de la orden"
                                  style="height: 50px"></textarea>
                        <ValidationMessage For="@(() => prioridad.Orden)" />
                    </div>
                </form>
            </div>
        </div>
        <div class="shadow border border-4 rz-border-radius-4 card-footer d-flex justify-content-center">
            <div class="btn-group" role="group">
                <button type="button" class="rz-border-radius-4 shadow border border-4 btn btn-primary"
                        @onclick="Nuevo">
                    <i class="oi oi-document" /> Nuevo
                </button>
                <button type="submit" class="rz-border-radius-4 shadow border border-4 btn btn-success bi bi-save-fill">
                    Guardar
                </button>
                <button type="button" class="rz-border-radius-4 shadow border border-4 btn btn-danger"
                        @onclick="Eliminar">
                    <i class="oi oi-trash" />
                    Eliminar
                </button>
            </div>
        </div>

    </div>
</EditForm>

@code {
    [Parameter]
    public int PrioridadId { get; set; }
    public Prioridades prioridad { get; set; } = new Prioridades();

    public List<Prioridades> lista { get; set; } = new List<Prioridades>();

    protected async override Task OnInitializedAsync()
    {
        if (PrioridadId > 0)
        {
            this.prioridad.PrioridadId = PrioridadId;
            await this.Buscar();
        }
    }
    private async Task Buscar()
    {
        if (prioridad.PrioridadId > 0)
        {
            var encontrado = await prioridadesBLL.Buscar(prioridad.PrioridadId);

            if (encontrado != null)
                this.prioridad = encontrado;
        }
    }
    public async Task Guardar()
    {

        bool guardo;

        guardo = await prioridadesBLL.Guardar(prioridad);
        if (guardo)
        {
            notificacion.ShowNotification("Guardado correctamente.");
            Nuevo();
        }
        else
        {
            notificacion.ShowNotification("NO FUE GUARDADO correctamente", NotificationSeverity.Error);
        }

    }
    public async Task Nuevo()
    {
        prioridad = new Prioridades();
    }

    public async Task Eliminar()
    {
        bool elimino;

        elimino = await prioridadesBLL.Eliminar(prioridad);

        if (elimino)
        {
            notificacion.ShowNotification("Eliminado correctamente.", NotificationSeverity.Error);
            Nuevo();
        }
        else
        {
            notificacion.ShowNotification("NO SE PUDO ELIMINAR CORRECTAMENTE.", NotificationSeverity.Warning);
        }
    }


}
