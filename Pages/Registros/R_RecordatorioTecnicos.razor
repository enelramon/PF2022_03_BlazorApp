@page "/RecordatorioT"
@page "/RecordatorioT/{RecordatorioTecnicoId:int}"

@inject RecordatoriosBLL recordatoriosBLL
@inject NotificationService recordatorio
@inject TecnicosBLL tecnicosBLL

<EditForm Model="RecordatorioT" OnValidSubmit="GuardarRecordatorios">
    <DataAnnotationsValidator />

    <a type="button" class="rz-border-radius-4 shadow border border-4 btn-lg btn btn-primary" data-toggle="tooltip" data-placement="right" title="Regresar al menu" href="m_recordatorios" > <i class="oi oi-arrow-circle-left" /></a>
    <br/>
    <p/>

    <div class="rz-border-radius-4 shadow bg-white d-block p-2 border border-4">
        <div class="rz-border-radius-4 shadow card-header text-center">
            <h3>Registro Recordatorios (Tecnico) </h3>
        </div>

        <div class="rz-border-radius-4 shadow border border-4 card card-body">
            <div class="container overflow-hidden">
                <form class="row gy-3">

                    @*RecordatorioId*@
                    <div class="form-row align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <label class="form-label">RecordatorioTecnicoId</label>
                                <div class="input-group">
                                    <InputNumber @bind-Value="RecordatorioT.RecordatorioTecnicoId" placeholder="Ingrese un ID"
                                        class="rz-border-radius-4 shadow form-control col-4" />
                                    <div class="input-group-append">
                                        <button type="button"
                                            class="rz-border-radius-4 shadow btn btn-primary input-group-text"
                                            @onclick="BuscarRecordatorios">
                                            <i class="oi oi-magnifying-glass" />
                                        </button>
                                    </div>
                                </div>
                                <ValidationMessage For="@(() => RecordatorioT.RecordatorioTecnicoId)" />
                            </div>
                        </div>
                    </div>

                    @*Dia*@
                    <div class="col-md-2">
                        <label class="form-label">Dia</label>
                        <InputNumber @bind-Value="RecordatorioT.Dia" placeholder="Ingrese un dia"
                            class="rz-border-radius-4 shadow shadow form-control" />
                        <ValidationMessage For="@(() => RecordatorioT.Dia)" />
                    </div>

                    @*ProximaFecha*@
                    <div class="col-md-2">
                        <label class="form-label">ProximaFecha</label>
                        <InputDate @bind-Value="RecordatorioT.FroximaFecha"
                            class="rz-border-radius-4 shadow form-control shadow" />
                        <ValidationMessage For="@(() => RecordatorioT.FroximaFecha)" />
                    </div>

                    @*TecnicoId*@
                    <div class="col-md-3">
                        <label class="form-label">TecnicoId</label>
                        <div class="input-group mb-3">
                            <InputSelect class="rz-border-radius-4 shadow form-select"
                                @bind-Value="RecordatorioT.TecnicoId">
                                <option value="0" disabled>Seleccione el tecnico</option>
                                @foreach (Tecnicos selector in ListaTecnicos)
                                {
                                    <option value="@selector.TecnicoId">@selector.Nombres</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => RecordatorioT.TecnicoId)" />
                        </div>
                    </div>

                    @*Descripción*@
                    <div class="col-md-5">
                        <textarea type="text" class="rz-border-radius-4 shadow text-center form-control shadow"
                            @bind="RecordatorioT.Descripción" placeholder="Ingresa una descripcion"
                            style="height: 90px"></textarea>
                        <ValidationMessage For="@(() => RecordatorioT.Descripción)" />
                    </div>
                </form>
            </div>
        </div>
        <div class="shadow border border-4 rz-border-radius-4 card-footer d-flex justify-content-center">
            <div class="btn-group" role="group">
                <button type="button" class="rz-border-radius-4 shadow border border-4 btn-lg btn btn-primary"
                    @onclick="GuardarRecordatorios"> <i class="oi oi-document" />
                    Guardar</button>
                <button type="button" class="rz-border-radius-4 shadow border border-4 btn-lg btn btn-success"
                    @onclick="EditarRecordatorios"> <i class="oi oi-pencil" />
                    Editar</button>
                <button type="button" class="rz-border-radius-4 shadow border border-4 btn-lg btn btn-danger"
                    @onclick="EliminarRecordatorios"><i class="oi oi-trash" />
                    Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {

    [Parameter]
    public int RecordatorioTecnicoId { get; set; }
    private Tecnicos tecnicos { get; set; } = new Tecnicos();
    private RecordatorioTecnicos RecordatorioT { get; set; } = new RecordatorioTecnicos();
    private List<RecordatorioTecnicos> ListaRecordatorios { get; set; } = new List<RecordatorioTecnicos>();
    private List<Tecnicos> ListaTecnicos { get; set; } = new List<Tecnicos>();

    protected async override Task OnInitializedAsync()
    {
        ListaRecordatorios = await recordatoriosBLL.GetRecordatorioTecnicos(r => true);
        ListaTecnicos = await tecnicosBLL.GetList(t => true);

        if (RecordatorioTecnicoId > 0)
        {
            this.RecordatorioT.RecordatorioTecnicoId = RecordatorioTecnicoId;
            await this.BuscarRecordatorios();
        }
    }

    private async Task BuscarRecordatorios()
    {
        if (RecordatorioT.RecordatorioTecnicoId > 0 || RecordatorioT.Dia > 0)
        {
            var encontrado = await recordatoriosBLL.BuscarTecnicos(RecordatorioT.RecordatorioTecnicoId, RecordatorioT.Dia);

            if (encontrado != null)
            {
                this.RecordatorioT = encontrado;
                recordatorio.ShowNotification("Recordatorio encontrado", NotificationSeverity.Success);
            }
            else
            {
                recordatorio.ShowNotification("Recordatorio no encontrado", NotificationSeverity.Error);
            }
        }
    }
    private async Task GuardarRecordatorios()
    {
        bool guardar;

        if (RecordatorioT.Dia < 31 || RecordatorioT.Dia > 0)
        {
            guardar = true;
            guardar = await recordatoriosBLL.GuardarTecnicos(RecordatorioT);
            RecordatorioT = new RecordatorioTecnicos();
            recordatorio.ShowNotification("Recordatorio guardado", NotificationSeverity.Success);
        }
        else
        {
            guardar = false;
            recordatorio.ShowNotification("Recordatorio no guardado", NotificationSeverity.Error);
        }
    }

    private async Task EliminarRecordatorios()
    {
        bool elimino = await recordatoriosBLL.EliminacionTecnicos(RecordatorioT);

        if (elimino)
        {
            RecordatorioT = new RecordatorioTecnicos();
            recordatorio.ShowNotification("Recordatorio eliminado", NotificationSeverity.Success);
        }
        else
        {
            recordatorio.ShowNotification("Recordatorio no eliminado", NotificationSeverity.Error);
        }
    }

    private async Task EditarRecordatorios()
    {
        bool editar;

        if (RecordatorioT.Dia > 32 || RecordatorioT.Dia < 1)
        {
            editar = false;
            recordatorio.ShowNotification("Recordatorio no editado", NotificationSeverity.Error);
        }
        else
        {
            editar = true;
            editar = await recordatoriosBLL.EditarTecnicos(RecordatorioT);
            RecordatorioT = new RecordatorioTecnicos();
            recordatorio.ShowNotification("Recordatorio editado", NotificationSeverity.Success);
        }
    }
}