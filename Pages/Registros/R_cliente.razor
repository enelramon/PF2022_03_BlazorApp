  @page "/R_cliente"
@inject NotificationService notificacion
@inject ClienteBLL clienteBLL

<EditForm Model="cliente" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Registro de clientes</h3>
        </div>

        <div class="card-body">

            @*ClienteId*@
            <div class="form-r ow align-items-center">
                <div class="col-3">
                    <label>ClienteId</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="cliente.ClienteId" class="form-control col-4" />
                        <div class="input-group-append">
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary input-group-text"
                                    @onclick="Buscar">Buscar</button>
                            </div>
                        </div>
                    </div>
                </div>

         @*Nombre*@
            <div class="col-5">
                <label>Nombre </label>
                <InputText @bind-Value="cliente.Nombres" class="form-control" />
                <ValidationMessage For="@(() => cliente.Nombres)" />
            </div>

             @*Direccion*@
            <div class="col-5">
                <label>Direccion </label>
                <InputText @bind-Value="cliente.Direccion" class="form-control" />
                <ValidationMessage For="@(() => cliente.Direccion)" />
            </div>

             @*Cedula*@
            <div class="col-3">
                <label>Cedula </label>
                <InputText @bind-Value="cliente.Cedula" class="form-control" />
                <ValidationMessage For="@(() => cliente.Cedula)" />
            </div>

              @*Email*@
            <div class="col-5">
                <label>Email </label>
                <InputText @bind-Value="cliente.Email" class="form-control" />
                <ValidationMessage For="@(() => cliente.Email)" />
            </div>

              @*Telefono*@
            <div class="col-3">
                <label>Telefono </label>
                <InputText @bind-Value="cliente.Telefono" class="form-control" />
                <ValidationMessage For="@(() => cliente.Telefono)" />
            </div>

             @*Celular*@
            <div class="col-3">
                <label>Celular </label>
                <InputText @bind-Value="cliente.Celular" class="form-control" />
                <ValidationMessage For="@(() => cliente.Celular)" />
            </div>
            
                   
 <div class="card-footer">
        <div class="mb-3 text-center" display: inline-block>
            <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">
                <i class="oi oi-file" /> Nuevo
            </button>
            <button type="submit" class="btn btn-lg btn-success">
                <i class="oi oi-document" /> Guardar
            </button>
            <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                <i class="oi oi-trash" /> Eliminar
            </button>
        </div>

    </div>
    </div>
    </div>
    </div>

</EditForm>
@code {
 [Parameter]
    public int ClienteID { get; set; }

    public Cliente cliente {get; set;} = new Cliente();

    public List<Cliente> lista {get; set;} = new List<Cliente>();

    protected override void OnInitialized()
    {
        if (ClienteID > 0)
        {
            this.cliente.ClienteId = ClienteID;
            this.Buscar();
        }
    }

     public void Nuevo()
    {
        cliente = new Cliente();
        notificacion.ShowNotification("Nueva plantilla.", NotificationSeverity.Success);

    }

  bool Validar()
    {
        return cliente.Direccion.Contains(".");
    }

     void Guardar()
    {

        bool guardado = clienteBLL.Guardar(cliente);

        if (guardado)
        {
            Nuevo();
            notificacion.ShowNotification("Guardado correctamente.");
        }
        else{
            notificacion.ShowNotification("No fue guardado, intentelo de nuevo.", NotificationSeverity.Error);

        }
      
    }
     void Buscar()
    {
        if (cliente.ClienteId > 0)
        {
            var encontrado = clienteBLL.Buscar(cliente.ClienteId);

            if (encontrado != null)
            {
                this.cliente = encontrado;
            notificacion.ShowNotification("Registro encontrado", NotificationSeverity.Success);

            
            }
            else
            {
            notificacion.ShowNotification("Registro no encontrado", NotificationSeverity.Warning);
            
            }
        }
    }
        void Eliminar()
    {

        var elimino =  clienteBLL.Eliminar(cliente);
        if (elimino)
        {
            Nuevo();
            notificacion.ShowNotification("Eliminado correctamente.");
        
        }
        else
        {
            notificacion.ShowNotification("No fue eliminado. Actualize el navegador y vuelva a intentarlo.", NotificationSeverity.Error);

        }
    }

}

